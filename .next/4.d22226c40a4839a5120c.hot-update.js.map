{"version":3,"file":"4.d22226c40a4839a5120c.hot-update.js","sources":["webpack:///components/AddContact/index.js"],"sourcesContent":["import React from 'react';\nimport { func } from 'prop-types';\n\nimport { graphql, compose } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { Card, CardActions, CardHeader } from 'material-ui/Card';\n\nimport Divider from 'material-ui/Divider';\n\nimport TextField from 'material-ui/TextField';\nimport RaisedButton from 'material-ui/RaisedButton';\n\nimport withState from './state.hoc';\nimport { styles } from './styles.css';\n\nconst placeholders = [\n  'https://semantic-ui.com/images/avatar2/large/elyse.png',\n  'https://semantic-ui.com/images/avatar2/large/matthew.png',\n  'https://semantic-ui.com/images/avatar2/large/kristy.png',\n];\n\nconst AddContact = withState(({\n  onChange,\n  createContact,\n  updateContact,\n  id,\n  firstName,\n  lastName,\n  phoneNumbers,\n  errors,\n}) => (\n  <form\n    noValidate\n    autoComplete=\"off\"\n    onSubmit={(e) => {\n      e.preventDefault();\n      if (id) {\n        updateContact(id, firstName, lastName, [phoneNumbers]);\n      } else {\n        createContact(firstName, lastName, [phoneNumbers]);\n      }\n    }}\n  >\n    <Card>\n      <CardHeader\n        title={`${id ? 'Edit' : 'Add'} a contact`}\n        subtitle={`Here you can ${id ? 'edit' : 'add'} a contact`}\n        avatar={placeholders[1]}\n      />\n      <TextField\n        hintText=\"First name\"\n        style={styles.textField}\n        underlineShow={false}\n        value={firstName}\n        onChange={e => onChange({ firstName: e.target.value })}\n        errorText={errors.firstName}\n      />\n      <Divider />\n      <TextField\n        hintText=\"Last name\"\n        style={styles.textField}\n        underlineShow={false}\n        value={lastName}\n        onChange={e => onChange({ lastName: e.target.value })}\n        errorText={errors.lastName}\n      />\n      <Divider />\n      <TextField\n        hintText=\"Phone Number\"\n        style={styles.textField}\n        underlineShow={false}\n        value={phoneNumbers && phoneNumbers.number}\n        onChange={e => onChange({ phoneNumbers: { ...phoneNumbers, number: e.target.value } })}\n        errorText={errors.phoneNumbers && errors.phoneNumbers[0].number}\n      />\n      <TextField\n        hintText=\"Phone Label\"\n        style={styles.textField}\n        underlineShow={false}\n        value={phoneNumbers && phoneNumbers.label}\n        onChange={e => onChange({ phoneNumbers: { ...phoneNumbers, label: e.target.value } })}\n        errorText={errors.phoneNumbers && errors.phoneNumbers[0].number}\n      />\n      <Divider />\n      <CardActions style={styles.actions}>\n        <RaisedButton\n          label=\"Submit\"\n          type=\"submit\"\n          primary\n        />\n      </CardActions>\n    </Card>\n  </form>\n));\n\nAddContact.propTypes = {\n  onChange: func,\n  onSubmit: func,\n};\n\nconst createContact = gql`\n  mutation createContact(\n    $firstName: String!,\n    $lastName: String!,\n    $phoneNumbers: [PhoneNumber!]!,\n  ) {\n    createContact(\n      firstName: $firstName\n      lastName: $lastName\n      phoneNumbers: $phoneNumbers\n    ) {\n      id\n      firstName\n      lastName\n      phoneNumbers {\n        number\n        label\n      }\n      createdAt\n    }\n  }\n`;\n\nconst updateContact = gql`\n  mutation updateContact($id: ID!, $firstName: String!, $lastName: String!, $PhoneNumbers: [PhoneNumber]!) {\n    updateContact(id: $id, firstName: $firstName, lastName: $lastName, number: $number, label: $label) {\n      id\n      firstName\n      lastName\n      phoneNumber\n      updatedAt\n    }\n  }\n`;\n\nconst withQuery = compose(\n  graphql(createContact, {\n    props: ({ mutate }) => ({\n      createContact: (firstName, lastName, phoneNumbers) => mutate({\n        variables: {\n          firstName, lastName, phoneNumbers,\n        },\n        refetchQueries: ['allContacts'],\n      }),\n    }),\n  }),\n  graphql(updateContact, {\n    props: ({ mutate }) => ({\n      updateContact: (id, firstName, lastName, phoneNumber) =>\n        mutate({\n          variables: {\n            id, firstName, lastName, phoneNumber,\n          },\n        }),\n    }),\n  }),\n);\n\nexport default withQuery(AddContact);\n\n\n\n// WEBPACK FOOTER //\n// components/AddContact/index.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAhEA;AA0EA;AACA;AACA;AAFA;AAKA;AAuBA;AAYA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AAJA;AAAA;AADA;AAAA;AADA;AAWA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AADA;AADA;AADA;AADA;AAAA;AADA;AACA;AAWA;AACA;AADA;;;;;;;;;;;;AA/IA;AAMA;AA+EA;AAuBA;AAYA;;;;;;;;;;A","sourceRoot":""}